## Autogenerated by Scribe. DO NOT MODIFY.

name: Reviews
description: |-

  API for managing reviews.
endpoints:
  -
    httpMethods:
      - GET
    uri: 'api/services/{service_id}/reviews'
    metadata:
      groupName: Reviews
      groupDescription: |-

        API for managing reviews.
      subgroup: ''
      subgroupDescription: ''
      title: 'Get a list of Reviews'
      description: 'Retrieve a paginated list of reviews. Optionally, include related services or review authors (users) by using the `include` parameter.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      service_id:
        name: service_id
        description: 'The ID of the service.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: false
        custom: []
    cleanUrlParameters:
      service_id: 1
    queryParameters:
      include:
        name: include
        description: 'Include related resources. Possible values: `service`, `reviews.user`.'
        required: false
        example: '?include=service,reviews.user'
        type: string
        enumValues: []
        exampleWasSpecified: true
        custom: []
    cleanQueryParameters:
      include: '?include=service,reviews.user'
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "data": [
              {
                "id": 1,
                "service_id": 10,
                "user_id": 5,
                "rating": 5,
                "comment": "Excellent service!",
                "created_at": "2024-09-15T12:45:32.000000Z",
                "updated_at": "2024-09-15T12:45:32.000000Z",
                "service": {
                  "id": 10,
                  "name": "Spa Service",
                  "category_id": 3,
                  "address": "123 Wellness Street",
                  "latitude": 34.052235,
                  "longitude": -118.243683
                },
                "user": {
                  "id": 5,
                  "name": "John Doe"
                }
              }
            ],
            "links": {
              "first": "http://example.com/api/reviews?page=1",
              "last": "http://example.com/api/reviews?page=3",
              "prev": null,
              "next": "http://example.com/api/reviews?page=2"
            },
            "meta": {
              "current_page": 1,
              "from": 1,
              "last_page": 3,
              "path": "http://example.com/api/reviews",
              "per_page": 15,
              "to": 15,
              "total": 45
            }
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: 'api/services/{service_id}/reviews'
    metadata:
      groupName: Reviews
      groupDescription: |-

        API for managing reviews.
      subgroup: ''
      subgroupDescription: ''
      title: 'Create a new Review'
      description: 'Store a new review for a specific service. You must provide a service ID, user ID, rating, and optionally a comment.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      service_id:
        name: service_id
        description: 'The ID of the service.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: false
        custom: []
    cleanUrlParameters:
      service_id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      service_id:
        name: service_id
        description: 'The ID of the related service.'
        required: true
        example: 10
        type: integer
        enumValues: []
        exampleWasSpecified: true
        custom: []
      user_id:
        name: user_id
        description: 'The ID of the user posting the review.'
        required: true
        example: 5
        type: integer
        enumValues: []
        exampleWasSpecified: true
        custom: []
      rating:
        name: rating
        description: 'The rating for the service, between 1 and 5.'
        required: true
        example: 5
        type: integer
        enumValues: []
        exampleWasSpecified: true
        custom: []
      comment:
        name: comment
        description: 'optional The comment for the review.'
        required: false
        example: 'Excellent service!'
        type: string
        enumValues: []
        exampleWasSpecified: true
        custom: []
    cleanBodyParameters:
      service_id: 10
      user_id: 5
      rating: 5
      comment: 'Excellent service!'
    fileParameters: []
    responses:
      -
        status: 201
        content: |-
          {
            "id": 1,
            "service_id": 10,
            "user_id": 5,
            "rating": 5,
            "comment": "Excellent service!",
            "created_at": "2024-09-15T12:45:32.000000Z",
            "updated_at": "2024-09-15T12:45:32.000000Z"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/services/{service_id}/reviews/{id}'
    metadata:
      groupName: Reviews
      groupDescription: |-

        API for managing reviews.
      subgroup: ''
      subgroupDescription: ''
      title: 'Create a new Review'
      description: 'Store a new review for a specific service. You must provide a service ID, user ID, rating, and optionally a comment.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      service_id:
        name: service_id
        description: 'The ID of the service.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: false
        custom: []
      id:
        name: id
        description: 'The ID of the review.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: false
        custom: []
    cleanUrlParameters:
      service_id: 1
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      service_id:
        name: service_id
        description: 'The ID of the related service.'
        required: true
        example: 10
        type: integer
        enumValues: []
        exampleWasSpecified: true
        custom: []
      user_id:
        name: user_id
        description: 'The ID of the user posting the review.'
        required: true
        example: 5
        type: integer
        enumValues: []
        exampleWasSpecified: true
        custom: []
      rating:
        name: rating
        description: 'The rating for the service, between 1 and 5.'
        required: true
        example: 5
        type: integer
        enumValues: []
        exampleWasSpecified: true
        custom: []
      comment:
        name: comment
        description: 'optional The comment for the review.'
        required: false
        example: 'Excellent service!'
        type: string
        enumValues: []
        exampleWasSpecified: true
        custom: []
    cleanBodyParameters:
      service_id: 10
      user_id: 5
      rating: 5
      comment: 'Excellent service!'
    fileParameters: []
    responses:
      -
        status: 201
        content: |-
          {
            "id": 1,
            "service_id": 10,
            "user_id": 5,
            "rating": 5,
            "comment": "Excellent service!",
            "created_at": "2024-09-15T12:45:32.000000Z",
            "updated_at": "2024-09-15T12:45:32.000000Z"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - PUT
      - PATCH
    uri: 'api/services/{service_id}/reviews/{id}'
    metadata:
      groupName: Reviews
      groupDescription: |-

        API for managing reviews.
      subgroup: ''
      subgroupDescription: ''
      title: 'Update a Review'
      description: 'Update the details of an existing review by its ID. You can update the rating, comment, or related service.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      service_id:
        name: service_id
        description: 'The ID of the service.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: false
        custom: []
      id:
        name: id
        description: 'The ID of the review.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        custom: []
    cleanUrlParameters:
      service_id: 1
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      rating:
        name: rating
        description: 'optional The rating for the service, between 1 and 5.'
        required: false
        example: 4
        type: integer
        enumValues: []
        exampleWasSpecified: true
        custom: []
      comment:
        name: comment
        description: 'optional The comment for the review.'
        required: false
        example: 'Good service, but room for improvement.'
        type: string
        enumValues: []
        exampleWasSpecified: true
        custom: []
      service_id:
        name: service_id
        description: 'optional The ID of the related service.'
        required: false
        example: 11
        type: integer
        enumValues: []
        exampleWasSpecified: true
        custom: []
    cleanBodyParameters:
      rating: 4
      comment: 'Good service, but room for improvement.'
      service_id: 11
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
            "id": 1,
            "service_id": 11,
            "user_id": 5,
            "rating": 4,
            "comment": "Good service, but room for improvement.",
            "created_at": "2024-09-15T12:45:32.000000Z",
            "updated_at": "2024-09-15T13:00:00.000000Z"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/services/{service_id}/reviews/{id}'
    metadata:
      groupName: Reviews
      groupDescription: |-

        API for managing reviews.
      subgroup: ''
      subgroupDescription: ''
      title: 'Delete a Review'
      description: 'Delete a specific review by its ID. This action is irreversible.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      service_id:
        name: service_id
        description: 'The ID of the service.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: false
        custom: []
      id:
        name: id
        description: 'The ID of the review.'
        required: true
        example: 1
        type: integer
        enumValues: []
        exampleWasSpecified: true
        custom: []
    cleanUrlParameters:
      service_id: 1
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 204
        content: |-
          {
            "message": "Review deleted successfully"
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
